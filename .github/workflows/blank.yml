name: Compare AWS Secrets

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight

jobs:
  compare-secrets:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Configure AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Default region for AWS CLI

      # Step 2: Fetch secret names from both regions
      - name: Fetch and validate secret names
        id: fetch_secret_names
        run: |
          set -e
          
          REGION1="us-east-1"
          REGION2="us-west-2"

          echo "Fetching secret names from $REGION1 and $REGION2..."

          # Fetch secret names from both regions
          SECRET_NAMES_1=$(aws secretsmanager list-secrets --region "$REGION1" --query 'SecretList[].Name' --output text || echo "")
          SECRET_NAMES_2=$(aws secretsmanager list-secrets --region "$REGION2" --query 'SecretList[].Name' --output text || echo "")

          # Validate secret names
          VALID_SECRET_NAMES_1=$(echo "$SECRET_NAMES_1" | tr '\t' '\n' | grep -E '^[a-zA-Z0-9\-_+=.@!/]+$' || echo "")
          VALID_SECRET_NAMES_2=$(echo "$SECRET_NAMES_2" | tr '\t' '\n' | grep -E '^[a-zA-Z0-9\-_+=.@!/]+$' || echo "")

          echo "VALID_SECRET_NAMES_1=$(echo $VALID_SECRET_NAMES_1 | tr '\n' ' ')" >> $GITHUB_ENV
          echo "VALID_SECRET_NAMES_2=$(echo $VALID_SECRET_NAMES_2 | tr '\n' ' ')" >> $GITHUB_ENV

      # Step 3: Fetch and compare all secrets from both regions
      - name: Fetch and compare secrets
        id: compare_secrets
        run: |
          set -e
          
          REGION1="us-east-1"
          REGION2="us-west-2"

          # Read validated secret names from environment
          IFS=' ' read -r -a VALID_SECRET_NAMES_1 <<< "${{ env.VALID_SECRET_NAMES_1 }}"
          IFS=' ' read -r -a VALID_SECRET_NAMES_2 <<< "${{ env.VALID_SECRET_NAMES_2 }}"

          MISMATCHES='{"region1_only": {}, "region2_only": {}}'

          for SECRET_NAME in "${VALID_SECRET_NAMES_1[@]}"; do
            SECRET1=$(aws secretsmanager get-secret-value --region "$REGION1" --secret-id "$SECRET_NAME" --query 'SecretString' --output text || echo "{}")
            SECRET2=$(aws secretsmanager get-secret-value --region "$REGION2" --secret-id "$SECRET_NAME" --query 'SecretString' --output text || echo "{}")

            # Sort secrets for comparison
            SORTED_SECRET1=$(echo "$SECRET1" | jq -S . || echo "{}")
            SORTED_SECRET2=$(echo "$SECRET2" | jq -S . || echo "{}")

            if [[ "$SORTED_SECRET1" != "$SORTED_SECRET2" ]]; then
              REGION1_ONLY=$(echo "$SORTED_SECRET1" | jq -c --argjson secret2 "$SORTED_SECRET2" \
                'to_entries | map(select(.value != ($secret2[.key]))) | from_entries')
              REGION2_ONLY=$(echo "$SORTED_SECRET2" | jq -c --argjson secret1 "$SORTED_SECRET1" \
                'to_entries | map(select(.value != ($secret1[.key]))) | from_entries')

              # Update mismatches
              MISMATCHES=$(echo "$MISMATCHES" | jq -c --argjson r1 "$REGION1_ONLY" --argjson r2 "$REGION2_ONLY" \
                '.region1_only += $r1 | .region2_only += $r2')
            fi
          done

          echo "$MISMATCHES" > mismatches.json
          echo "mismatches=$MISMATCHES" >> $GITHUB_ENV

      # Step 4: Notify Slack - Secrets Match
      - name: Notify Slack - Secrets Match
        if: ${{ env.mismatches == '{"region1_only":{},"region2_only":{}}' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"✅ Secrets in both regions are identical."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      # Step 5: Notify Slack - Secrets Mismatched
      - name: Notify Slack - Secrets Mismatched
        if: ${{ env.mismatches != '{"region1_only":{},"region2_only":{}}' }}
        run: |
          MISMATCHES_STRING=$(cat mismatches.json)
          REGION1_ONLY_KEYS=$(echo "$MISMATCHES_STRING" | jq -r '.region1_only | to_entries | map("\(.key): \(.value)") | .[]')
          REGION2_ONLY_KEYS=$(echo "$MISMATCHES_STRING" | jq -r '.region2_only | to_entries | map("\(.key): \(.value)") | .[]')

          curl -X POST -H 'Content-type: application/json' \
          --data "{
              \"text\": \"⚠️ Secrets in both regions do not match.\",
              \"attachments\": [
                  {
                      \"text\": \"Mismatches in region 1: \n${REGION1_ONLY_KEYS}\nMismatches in region 2: \n${REGION2_ONLY_KEYS}\"
                  }
              ]
          }" ${{ secrets.SLACK_WEBHOOK_URL }}
