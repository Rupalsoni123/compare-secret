name: Compare AWS Secrets

on:
  workflow_dispatch: # Allows manual triggering of the workflow
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight

jobs:
  compare-secrets:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Configure AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Default region for AWS CLI

      # Step 2: Fetch all secrets from both regions
      - name: Fetch all secrets from both regions
        id: fetch_secrets
        run: |
          set -e

          REGION1="us-east-1"
          REGION2="us-west-2"

          # Fetch all secret names from both regions
          SECRET_NAMES1=$(aws secretsmanager list-secrets --region "$REGION1" --query 'SecretList[].Name' --output text)
          SECRET_NAMES2=$(aws secretsmanager list-secrets --region "$REGION2" --query 'SecretList[].Name' --output text)

          # Fetch secret values for each secret in both regions
          declare -A SECRETS_REGION1
          declare -A SECRETS_REGION2

          for SECRET_NAME in $SECRET_NAMES1; do
            SECRET_VALUE=$(aws secretsmanager get-secret-value --region "$REGION1" --secret-id "$SECRET_NAME" --query 'SecretString' --output text || echo "{}")
            SECRETS_REGION1["$SECRET_NAME"]=$SECRET_VALUE
          done

          for SECRET_NAME in $SECRET_NAMES2; do
            SECRET_VALUE=$(aws secretsmanager get-secret-value --region "$REGION2" --secret-id "$SECRET_NAME" --query 'SecretString' --output text || echo "{}")
            SECRETS_REGION2["$SECRET_NAME"]=$SECRET_VALUE
          done

          # Save secrets as environment variables for later steps
          echo "SECRETS_REGION1=$SECRETS_REGION1" >> $GITHUB_ENV
          echo "SECRETS_REGION2=$SECRETS_REGION2" >> $GITHUB_ENV

      # Step 3: Compare secrets using jq
      - name: Compare secrets using jq
        id: compare_secrets
        run: |
          set -e

          # Initialize variables for mismatches
          MISMATCHES=""
          
          # Compare secrets from both regions
          for SECRET_NAME in "${!SECRETS_REGION1[@]}"; do
            SECRET1="${SECRETS_REGION1[$SECRET_NAME]}"
            SECRET2="${SECRETS_REGION2[$SECRET_NAME]}"

            # Sort and compare secrets using jq
            SORTED_SECRET1=$(echo "$SECRET1" | jq -S .)
            SORTED_SECRET2=$(echo "$SECRET2" | jq -S .)

            if [[ "$SORTED_SECRET1" != "$SORTED_SECRET2" ]]; then
              MISMATCHES="${MISMATCHES}Secret Name: $SECRET_NAME\n"
              MISMATCHES="${MISMATCHES}Region 1 Mismatch: $(echo "$SORTED_SECRET1" | jq -c .)\n"
              MISMATCHES="${MISMATCHES}Region 2 Mismatch: $(echo "$SORTED_SECRET2" | jq -c .)\n\n"
            fi
          done

          # Save mismatches to an environment variable if found
          if [ -n "$MISMATCHES" ]; then
            echo "mismatches=$MISMATCHES" >> $GITHUB_ENV
          else
            echo "mismatches=No mismatches found" >> $GITHUB_ENV

      # Step 4: Notify Slack - Secrets Match
      - name: Notify Slack - Secrets Match
        if: env.mismatches == 'No mismatches found'
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"✅ All secrets in both regions match."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      # Step 5: Notify Slack - Secrets Mismatched
      - name: Notify Slack - Secrets Mismatched
        if: env.mismatches != 'No mismatches found'
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{
              \"text\": \"⚠️ Secrets mismatch detected.\",
              \"attachments\": [
                  {
                      \"text\": \"${{ env.mismatches }}\"
                  }
              ]
          }" ${{ secrets.SLACK_WEBHOOK_URL }}
