name: Compare All AWS Secrets

on:
  workflow_dispatch: # Allows manual triggering of the workflow
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight

jobs:
  compare-secrets:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Configure AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Default region for AWS CLI

      # Step 2: Fetch all secrets from both regions
      - name: Fetch all secrets from both regions
        id: fetch_secrets
        run: |
          set -e

          REGION1="us-east-1"
          REGION2="us-west-2"
          
          # List all secrets in region1 and region2
          SECRET_LIST1=$(aws secretsmanager list-secrets --region "$REGION1" --query 'SecretList[].Name' --output text)
          SECRET_LIST2=$(aws secretsmanager list-secrets --region "$REGION2" --query 'SecretList[].Name' --output text)

          # Combine and save secret names to environment variables
          echo "SECRET_LIST1=$SECRET_LIST1" >> $GITHUB_ENV
          echo "SECRET_LIST2=$SECRET_LIST2" >> $GITHUB_ENV

      # Step 3: Compare each secret across regions
      - name: Compare secrets one by one
        id: compare_secrets
        run: |
          set -e

          REGION1="us-east-1"
          REGION2="us-west-2"
          
          # Split the list of secrets from both regions into arrays
          IFS=' ' read -r -a SECRET_LIST1_ARRAY <<< "$SECRET_LIST1"
          IFS=' ' read -r -a SECRET_LIST2_ARRAY <<< "$SECRET_LIST2"

          # Initialize a variable to track mismatches
          MISMATCHES=false

          # Loop through each secret in region1 and compare with region2
          for SECRET_NAME in "${SECRET_LIST1_ARRAY[@]}"; do
            echo "Comparing secret: $SECRET_NAME"
            
            # Fetch the secret value from both regions
            SECRET1=$(aws secretsmanager get-secret-value --region "$REGION1" --secret-id "$SECRET_NAME" --query 'SecretString' --output text || echo "{}")
            SECRET2=$(aws secretsmanager get-secret-value --region "$REGION2" --secret-id "$SECRET_NAME" --query 'SecretString' --output text || echo "{}")
            
            # Sort and format secrets using jq
            SORTED_SECRET1=$(echo "$SECRET1" | jq -S .)
            SORTED_SECRET2=$(echo "$SECRET2" | jq -S .)

            # Compare sorted JSON strings
            if [[ "$SORTED_SECRET1" == "$SORTED_SECRET2" ]]; then
                echo "$SECRET_NAME: match=true" >> $GITHUB_ENV
            else
                echo "$SECRET_NAME: match=false" >> $GITHUB_ENV
                MISMATCHES=true

                # Identify mismatches using JSON comparison
                REGION1_ONLY=$(echo "$SORTED_SECRET1" | jq -c --argjson secret2 "$SORTED_SECRET2" \
                  'to_entries | map(select(.value != ($secret2[.key]))) | from_entries')
                
                REGION2_ONLY=$(echo "$SORTED_SECRET2" | jq -c --argjson secret1 "$SORTED_SECRET1" \
                  'to_entries | map(select(.value != ($secret1[.key]))) | from_entries')

                # Ensure the output is correctly formatted as a JSON string
                MISMATCHES=$(jq -n --argjson region1_only "$REGION1_ONLY" --argjson region2_only "$REGION2_ONLY" \
                  '{region1_only: $region1_only, region2_only: $region2_only}')

                # Save mismatches to a file
                echo "$MISMATCHES" > mismatches_$SECRET_NAME.json
            fi
          done

          # Save the mismatch status to the environment variable
          echo "MISMATCHES=$MISMATCHES" >> $GITHUB_ENV

      # Step 4: Notify Slack - Secrets Match
      - name: Notify Slack - Secrets Match
        if: ${{ env.MISMATCHES == 'false' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"✅ All secrets are identical across regions."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      # Step 5: Notify Slack - Secrets Mismatched
      - name: Notify Slack - Secrets Mismatched
        if: ${{ env.MISMATCHES == 'true' }}
        run: |
          echo "Mismatches found, sending details..." # Debug output for mismatches

          # Loop through each mismatch file and send details to Slack
          for MISMATCH_FILE in $(ls mismatches_*.json); do
            MISMATCHES_STRING=$(cat $MISMATCH_FILE)

            # Extract the mismatched environment variables (only the keys that differ)
            REGION1_ONLY_KEYS=$(echo "$MISMATCHES_STRING" | jq -r '.region1_only | to_entries | map("\(.key): \(.value)") | .[]')
            REGION2_ONLY_KEYS=$(echo "$MISMATCHES_STRING" | jq -r '.region2_only | to_entries | map("\(.key): \(.value)") | .[]')

            # Notify Slack with mismatches as an attachment
            curl -X POST -H 'Content-type: application/json' \
            --data "{
                \"text\": \"⚠️ Secrets for $MISMATCH_FILE do not match.\",
                \"attachments\": [
                    {
                        \"text\": \"Mismatches in region 1: \n${REGION1_ONLY_KEYS}\nMismatches in region 2: \n${REGION2_ONLY_KEYS}\"
                    }
                ]
            }" ${{ secrets.SLACK_WEBHOOK_URL }}
          done
